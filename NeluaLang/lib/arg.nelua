--[[
The arguments library provides the global sequence `arg`,
which is filled with command line arguments on initialization.
]]

require 'sequence'
require 'allocators.general'

--[[
Sequence of command line arguments.

The value at index `0` is usually filled with the program executable name.
The values starting from index `1` up to `#arg` contains each command line argument.
]]
global arg: sequence(string, GeneralAllocator)

-- We only want to initialize 'arg' if it is really used somewhere else.
## after_analyze(hygienize(function()
  ## if symbols.arg:is_used() then
  -- Import argc and argv from C 'nelua_main'
  local nelua_argc: cint <cimport>
  local nelua_argv: *[0]cstring <cimport>

  -- setup args
  if nelua_argc > 0 then
    local narg: usize = (@usize)(nelua_argc-1)
    arg:reserve(narg)
    for i:usize=0,narg do
      arg[i] = nelua_argv[i]
    end
  end
  ## end
## end))

-- NOTE: The memory of `arg` is never freed, but it's fine, it's not a leak for global variables.

return arg
